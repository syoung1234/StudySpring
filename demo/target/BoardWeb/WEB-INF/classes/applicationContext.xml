<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

    <!-- DataSource 설정 -->
    <context:property-placeholder location="classpath:config/database.properties" />
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <!-- Transaction 설정 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="get" read-only="true" />
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* com.springbook.biz..*(..))" />
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />
    </aop:config>
    
    <!-- JdbcTemplate 설정 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <context:component-scan base-package="com.springbook.biz">
    </context:component-scan>

    <bean id="log" class="com.springbook.biz.common.LogAdvice"></bean>
    <bean id="before" class="com.springbook.biz.common.BeforeAdvice"></bean>
    <bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice"></bean>
    <bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"></bean>
    <bean id="after" class="com.springbook.biz.common.AfterAdvice"></bean>
    <bean id="around" class="com.springbook.biz.common.AroundAdvice"></bean>

    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

    <aop:config>
        <aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>
        <aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))"/>

        <aop:aspect ref="log">
            <aop:before pointcut-ref="allPointcut" method="printLog"/>
        </aop:aspect>

        <!-- <aop:aspect ref="afterThrowing">
            <aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog" throwing="exceptObj" />
        </aop:aspect> -->

        <!-- <aop:aspect ref="before">
            <aop:before pointcut-ref="allPointcut" method="beforeLog"/>
        </aop:aspect> -->

        <!-- <aop:aspect ref="afterReturning">
            <aop:after-returning pointcut-ref="getPointcut" method="afterLog" returning="returnObj" />
        </aop:aspect> -->

        <!-- <aop:aspect ref="after">
            <aop:before pointcut-ref="allPointcut" method="finallyLog"/>
        </aop:aspect> -->

        <!-- <aop:aspect ref="around">
            <aop:around pointcut-ref="allPointcut" method="aroundLog" />
        </aop:aspect> -->
    </aop:config>


    <!-- <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
        <property name="userDAO" ref="userDAO" />
    </bean>

    <bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO" /> -->


    <!-- <context:component-scan base-package="polymorphism"></context:component-scan>
    <bean class="polymorphism.SonySpeaker"></bean>
    <bean id="tv" class="polymorphism.LgTV"></bean> -->


    <!-- <bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="sony" p:price="2700000" init-method="initMethod" destroy-method="destroyMethod">
        <property name="speaker" ref="apple"></property>
        <property name="price" value="2700000"></property>
        <constructor-arg index="0" ref="apple"></constructor-arg>
        <constructor-arg index="1" value="2700000"></constructor-arg>
    </bean>

    <bean id="sony" class="polymorphism.SonySpeaker"></bean>

    <bean id="apple" class="polymorphism.AppleSpeaker"></bean>

    <bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
        <property name="addressList">
            <list>
                <value>서울시 강남구 역삼동</value>
                <value>서울시 성동구 행당동</value>
            </list>
        </property>

        <property name="addressList2">
            <set value-type="java.lang.String">
                <value>서울시 강남구 역삼동</value>
                <value>서울시 성동구 성수동</value>
                <value>서울시 성동구 성수동</value>
            </set>
        </property>

        <property name="addressList3">
            <map>
                <entry>
                    <key><value>고길동</value></key>
                    <value>서울시 강남구 역삼동</value>
                </entry>
                <entry>
                    <key><value>마이콜</value></key>
                    <value>서울시 강서구 화곡동</value>
                </entry>
            </map>
        </property>

        <property name="addressList4">
            <props>
                <prop key="고길동">서울시 강남구 역삼동</prop>
                <prop key="고길동">서울시 강서구 화곡동</prop>
            </props>
        </property>

    </bean> -->

</beans>